#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Initialise packages
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
      use-package-expand-minimally t))

#+end_src

* Basic Configuration
** Startup Settings
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000)) ;; increasing garbage collection thresold for faster startup times
#+end_src

** Some Helpful Settings
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)           ;; ask y or n instead of yes or no
  (defalias 'list-buffers 'ibuffer)       ;; improved version of listing iBuffers
  (setq echo-keystrokes 0.1)              ;; show keystrokes in minibuffer instantly
  (global-subword-mode 1)                 ;; camelCase string wills be treated as separate words

  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace))) ;; remove whitespaces while saving

  ;; auto-delete hightlighted text
  (delete-selection-mode 1)
#+end_src

** non GUI
#+begin_src emacs-lisp
  ;; inhibit the startup screen
  (setq inhibit-startup-screen t)

  ;; remove all gui
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode -1)
  (show-paren-mode 1)
  (setq visible-bell t)
    (setq use-dialog-box nil)               ;; diasable UI pop-up to keep fully keyboard driven
    ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized)) ;; start emacs in fullscreen
#+end_src

** Display shell properly
#+begin_src emacs-lisp
  (add-hook 'shell-mode-hook 'ansi-color=for-comint-mode-on) ;; diaplay colored shell properly
  (setq dired-enable-globstar-in-shell t)                    ;; enable globbing in shell-mode
  (setq dired-recursive-deletes 'always)                     ;; don't ask confimation questions
#+end_src

* Minibuffer
** Ivy for minibuffer completions
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    :bind
    (("C-x b" . 'ivy-switch-buffer)
     ("C-c C-r" . 'ivy-resume)
     ("C-c t" . 'counsel-load-theme)
     ("M-y" . 'counsel-yank-pop)))
#+end_src
** Consel for find file and related completions
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . 'counsel-M-x)
     ("C-x C-f" . 'counsel-find-file)))
#+end_src
** Swiper for advances search
#+begin_src emacs-lisp
  (use-package swiper
    :bind
    (("C-c s" . 'swiper-isearch)))
#+end_src

* Dired / File Management
** Symlink management
#+begin_src emacs-lisp
(setq find-file-visit-truename t)
#+end_src
** use iBuffer instead of default buffer
iBuffer is just an improvised version of buffer
#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+end_src
** File backups
#+begin_src emacs-lisp
  ;; disable emacs to automatically save files
  (setq make-backup-files nil)
  (setq backup-inhibited t)
  (setq auto-save-default nil)

  ;; Save backup files in a dedicated directory
  (setq backup-directory-alist '(("." . "~/.saves")))

#+end_src

** all the icons in dired
#+begin_src emacs-lisp
  ;; display icons in dired-mode
  (let ((installed (package-installed-p 'all-the-icons)))
    (use-package all-the-icons)
    (unless installed (all-the-icons-install-fonts)))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** autosave and auto-revert buffers
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)             ;; auto-revert changed files
  (setq global-auto-revert-non-file-buffers t) ;; auto-revert for non-file buffers
#+end_src
** Dired display settings
#+begin_src emacs-lisp
  (setq dired-omit-files "^\\.[^.].*"
    dired-omit-verbose nil
    dired-hide-details-hide-symlink-targets nil
    delete-by-moving-to-trash t)

  (when (or (eq system-type 'gnu/linux) (eq system-type 'windows-nt))
    (setq dired-listing-switches "-agho --group-directories-first"))
#+end_src
** use 'h' key to dired-up-directory
#+begin_src emacs-lisp
(eval-after-load 'dired
  '(define-key dired-mode-map (kbd "h") 'dired-up-directory))
#+end_src
** Dired-x for addtional features
#+begin_src emacs-lisp
  (autoload 'dired-omit-mode "dired-x")   ;; dired-x has some additonal features
#+end_src

* Set Locale
#+begin_src emacs-lisp
  (set-language-environment 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

* Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka" :height 150)
  (set-face-attribute 'variable-pitch nil :font "Iosevka" :height 150)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 150)
#+end_src
* Progaramming
** General settings
#+begin_src emacs-lisp
  ;; line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  (electric-pair-mode 1)                                         ;; enable autopairs by default

  ;; will display the funtion def in the menu bar (ide like feature)
  (add-hook 'my-mode-hook 'imenu-add-menubar-index)
  (global-set-key (kbd "C-S-f") 'imenu)


  (setq-default indent-tabs-mode nil)     ;; use spaces instead of tabs

  (setq-default tab-width 4)

  ;; '(tab-stop-list '(4 9 14 19 24 29 34 39 44 49 54 59 64 69 74 79))

#+end_src
** C-Programming
#+begin_src emacs-lisp
  ;; c-style comments
  (setq-default c-basic-offset 4
    c-default-style '((java-mode . "java")
          (awk-mode . "awk")))
  (add-hook 'c-mode-hook (lambda ()
           (interactive)
           (c-toggle-comment-style -1)))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'"
    :config
    (setq markdown-command "marked")
    (defun  set-markdown-header-font-sizes ()
      (dolist (face '((markdown-header-face-1 . 1.2)
          (markdown-header-face-2 . 1.1)
          (markdown-header-face-3 . 1.0)
          (markdown-header-face-4 . 1.0)
          (markdown-header-face-5 . 1.0)))
    (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))
    (defun mardown-mode-hook ()
      (set-markdown-header-font-sizes))

    (add-hook 'markdown-mode-hook 'markdown-mode-hook))
#+end_src

* Unbind nuisance keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-z") nil)    ;; disable (supend-frame) command. Very annoying at times
  (global-set-key (kbd "C-z") nil)        ;; (suspend-frame) also bound to this combination
#+end_src

* Theme
#+begin_src emacs-lisp
  (require-theme 'modus-themes)
  (setq modus-themes-common-palette-overrides modus-themes-preset-overrides-faint)
  (setq modus-themes-common-palette-overrides
        '((border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)
          (cursor "#dcd0ff")
          (bg-mode-line-active bg-lavender)
          (border-mode-line-active bg-lavender)
          (bg-mode-line-inactive bg-dim)
          (border-mode-line-inactive bg-inactive)))
  (load-theme 'modus-vivendi t)
#+end_src

* Reducing RSI
** God-Mode
*** Disable function key modificaiton by GOD-MODE
#+begin_src emacs-lisp
(setq god-mode-enable-function-key-translation nil)
#+end_src
*** Enable GOD-MODE and setup toggle globally
#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t)
  (global-set-key (kbd "C-c i") #'god-mode-all)
#+end_src
*** Visual indication when god-local-mode is active
#+begin_src emacs-lisp
  ;; first load the themes cursor-color
  (setq background-cursor-color (face-background 'cursor nil 'default))

  (defun my-god-mode-update-cursor-color ()
    "this function will change the cursor-color to red when god-local-mode is active, if not then cursor-color will be set back to themes default color"
    (if (or god-local-mode)
    (set-cursor-color "#e06666")
      (set-cursor-color background-cursor-color)))

  (add-hook 'post-command-hook #'my-god-mode-update-cursor-color)
#+end_src

*** Configuration for overwrite mode in GOD-MODE
#+begin_src emacs-lisp
(defun my-god-mode-toggle-on-overwrite ()
    "Toggle god-mode on overwrite-mode."
    (if (bound-and-true-p overwrite-mode)
    (god-local-mode-pause)
      (god-local-mode-resume)))

  (add-hook 'overwrite-mode-hook #'my-god-mode-toggle-on-overwrite)
#+end_src
*** Toggle isearch in GOD-MODE as well
#+begin_src emacs-lisp
  (require 'god-mode-isearch)
  (define-key isearch-mode-map (kbd "C-c i") #'god-mode-isearch-activate)
  (define-key god-mode-isearch-map (kbd "C-c i") #'god-mode-isearch-disable)
#+end_src
*** Toggle god-local-mode using the "i" key
#+begin_src emacs-lisp
  (define-key god-local-mode-map (kbd "i") #'god-local-mode)
#+end_src
*** Configure keybindings for windows navigation while in GOD-MODE
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-1") #'delete-other-windows)
  (global-set-key (kbd "C-x C-2") #'split-window-below)
  (global-set-key (kbd "C-x C-3") #'split-window-right)
  (global-set-key (kbd "C-x C-0") #'delete-window)

  (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
  (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
#+end_src
*** Disable GOD-MODE while in Dired-Mode
#+begin_src emacs-lisp
  (add-to-list 'god-exempt-major-modes '(dired-mode compilation-mode))
#+end_src
** Repeat mode
#+begin_src emacs-lisp
(repeat-mode 1)
#+end_src
* Scrolling
#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t) ;; preserve scrolling position

  ;; Smooth Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)

  (save-place-mode 1)                     ;; restore last cursor location

#+end_src
** Scrolling with point fixed on the screen
#+begin_src emacs-lisp
  (global-set-key (kbd "C-<down>") (kbd "C-u 1 C-v")) ;; scroll up with point
  (global-set-key (kbd "C-<up>") (kbd "C-u 1 M-v"))   ;; scroll down with point
#+end_src
** Smooth scrolling with touchpad / mouse
#+begin_src emacs-lisp
  pixel-scroll-precision-mode
#+end_src
* Org-mode
** org-mode
#+begin_src emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (setq org-modules
    '(org-crypt
      org-habit
      org-bookmark
      org-eshell))

  ;; maintain same syntax hightlighting in org-mode src blocks as in major mode editing buffers
  (setq org-src-fontify-natively t)

  (use-package org
    :hook (org-mode . org-mode-setup)
    :config (setq org-ellipsis " ▾")
    (setq org-directory "~/Notes/org-mode")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t))
#+end_src
*** org-mode packages
#+begin_src
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** All headings folded
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src
** org-babel
#+begin_src emacs-lisp
  ;; org-babel activate languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)   ;; avoid emacs asking for yes or no questions

  (use-package org-tempo
    :ensure nil
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("ba" . "src bash-ts"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes/org-roam-notes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))

  (setq find-file-visit-truename t)                   ;; force emacs to always resolve symlinks (performace cost)

  ;; over-ride the behaviour of org-roam note search to be case-insensitive
  (defun case-insensitive-org-roam-node-read (orig-fn &rest args)
    (let ((completion-ignore-case t))
      (apply orig-fn args)))

  (advice-add 'org-roam-node-read :around
   #'case-insensitive-org-roam-node-read)

  ;; enable database autosync
  (org-roam-db-autosync-mode 1)
#+end_src
** Automatically tangle when this file is saved
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
            (expand-file-name "~/.emacs.d/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

* IDE Features
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
        ;; ("s-p" . projectile-command-map)
        ("C-c p" . projectile-command-map)))

  ;; add space separated list, projectile will recursively search though each of the projects under these folders
  (setq projectile-project-search-path '("~/programming/" "~/projects/"))
  ;; install emacs ag and ripgrep packages, they are needed for some projectile commands
  (use-package ag
    :ensure t)
  (use-package ripgrep
    :ensure t)
#+end_src
*** Show indents
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :defer t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-character ?\|)
    (setq highlight-indent-guides-responsive 'top))
#+end_src
*** Eglot
LSP for EMACS
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
    '((c-mode c++-mode)
      . ("clangd"
     "-j=8"
     "--log=error"
     "--malloc-trim"
     "--clang-tidy"
     "--cross-file-rename"
     "--completion-style=detailed"
     "--pch-storage=memory"
     "--header-insertion=never"
     "--header-insertion-decorators=0"))))
  (add-hook 'c-mode-hook #'eglot-ensure)
  (setq eglot-autoshutdown t)             ;; shutdown eglot when all buffers of a mode is closed
#+end_src
* External Packages
** Async mode
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src

** Which-key (for self-documented suggestions)
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->")         'mc/mark-next-like-this)
    (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this)
    (global-set-key (kbd "C-\"")        'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-:")         'mc/skip-to-previous-like-this))
#+end_src
** company (auto-completions)
#+begin_src emacs-lisp
  ;; (require 'company)
  ;; (add-hook 'after-init-hook 'global-company-mode)
#+end_src
** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (global-set-key (kbd "M-p") 'move-text-up)
    (global-set-key (kbd "M-n") 'move-text-down))
#+end_src
** Display hex color when hex color-codes are used in buffer
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src
** Rainbow delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Pulsar
#+begin_src emacs-lisp
  (require 'pulsar)
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)
  (pulsar-global-mode)
#+end_src
* Encryption
#+begin_src emacs-lisp :tangel yes
  ;; automatic encryption and decryption for gpg encrypted files
  (require 'epa-file)
  (epa-file-enable)

  ;; allowing for password prompt in minibuffer
  (setq epa-pinentry-mode 'loopback)
#+end_src
* Functions
** Add 1 to an int
#+begin_src emacs-lisp
  (defun increment-integer ()
    "Increment the integer at point by 1."
    (interactive)
    (skip-chars-backwards "0123456789")
    (or (looking-at "[0-9]+")
    (error "No integer at point"))
    (replace-match
     (number-to-string
      (1+
       (string-to-number
    (match-string 0))))))

  (global-set-key (kbd "C-c +") 'increment-integer)
#+end_src
* Visit and referesh config file
#+begin_src emacs-lisp
  (defun config-visit ()
     (interactive)
     (find-file "~/.dotfiles/.emacs.d/init.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
  (defun config-reload ()
    "Reload ~/.dotfiles/.emacs.d/init.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.dotfiles/.emacs.d/init.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Diminish
#+begin_src emacs-lisp
  (require 'diminish)
  (diminish 'company-mode)
  (diminish 'org-mode)
  (diminish 'ivy-mode)
  (diminish 'projectile-mode)
  (diminish 'rainbow-mode)
  (diminish 'abbrev-mode)
#+end_src
